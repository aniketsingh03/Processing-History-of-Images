import os
import random

# Dataset Parameters
DATASET_PATH = 'dataset/jpegs'

LABEL = {
    'org' : 1,
    'high' : 2,
    'low' : 3,
    'tonal' : 4,
    'denoise' : 5,
}

#load data from here
def get_data(batch_size):
    #There are two types of data:
    #1. with randomly sized images (denomination M)
    #2. with images of size (512x512) (denomination C)

    #TODO these sets are to be generated by MATLAB
    #training set
    M_tr = read_images(os.path.join(DATASET_PATH, 'train/mtr'), batch_size) #arbitrarily sized images
    C_tr = read_images(os.path.join(DATASET_PATH, 'train/ctr'), batch_size) #(512x512) images
    
    print ("length of c_tr is %d"%(len(C_tr)))
    for c in C_tr:
        print(c)
        print("============")
        print(" ") 

    #validation set
    M_val = read_images(os.path.join(DATASET_PATH, 'val/mtr')) #arbitrarily sized images
    C_val = read_images(os.path.join(DATASET_PATH, 'val/ctr')) #(512x512) images

    #testing set
    M_test = read_images(os.path.join(DATASET_PATH, 'test/mtr')) #arbitrarily sized images
    C_test = read_images(os.path.join(DATASET_PATH, 'test/ctr')) #(512x512) images

    return (M_tr, C_tr, M_val, C_val, M_test, C_test)


def read_images(dataset_path, batch_size=None):
    """
    Load Images stored in class-wise folders and return batchwise lists
    """
    imagepaths, labels = list(), list()

    # List the directory
    classes = sorted(os.walk(dataset_path).__next__()[1])

    # List each sub-directory (the classes)
    for c in classes:
        c_dir = os.path.join(dataset_path, c)
        walk = os.walk(c_dir).__next__()
        for sample in walk[2]:
            # Only keeps jpeg images
            if sample.endswith('.jpg') or sample.endswith('.jpeg'):
                imagepaths.append(os.path.join(c_dir, sample))
                labels.append(LABEL[c])

    # Shuffle image dataset
    c = list(zip(imagepaths, labels))
    random.shuffle(c)
    imagepaths, labels = zip(*c)

    data = [imagepaths, labels]

    # if batch_size is given return batches of data
    if batch_size:
        imagepaths = [ list(imagepaths[i:i + batch_size])
            for i in range(0, len(imagepaths), batch_size)
        ]
        labels = [ list(labels[i:i + batch_size])
            for i in range(0, len(labels), batch_size)
        ]

        data =  [list(a) for a in zip(imagepaths, labels)]

    return data

a = get_data(2)